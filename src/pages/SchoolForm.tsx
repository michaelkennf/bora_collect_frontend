import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';
import { localStorageService } from '../services/localStorageService';
import { syncService } from '../services/syncService';

// Types pour les solutions de cuisson propre
interface HouseholdData {
  nomOuCode: string;
  age: string;
  sexe: 'Homme' | 'Femme';
  tailleMenage: string;
  communeQuartier: string;
  geolocalisation: string;
}

interface CookingData {
  combustibles: string[];
  equipements: string[];
  autresCombustibles?: string;
  autresEquipements?: string;
}

interface KnowledgeData {
  connaissanceSolutions: 'Oui' | 'Non';
  solutionsConnaissances?: string;
  avantages: string[];
  autresAvantages?: string;
}

interface ConstraintsData {
  obstacles: string[];
  autresObstacles?: string;
  pretA: string;
}

interface AdoptionData {
  pretAcheterFoyer: 'Oui' | 'Non';
  pretAcheterGPL: 'Oui' | 'Non';
}

// Types pour le formulaire principal
interface FormState {
  formData: {
    household: HouseholdData;
    cooking: CookingData;
    knowledge: KnowledgeData;
    constraints: ConstraintsData;
    adoption: AdoptionData;
  };
}

// Types pour la g√©olocalisation
interface GeolocationState {
  latitude: number | null;
  longitude: number | null;
  accuracy: number | null;
  timestamp: number | null;
  isCapturing: boolean;
  error: string | null;
}

// Options pour les combustibles
const combustibles = [
  'Bois',
  'Charbon de bois (Makala)',
  'Gaz (butane/propane)',
  '√âlectricit√©',
  'Briquettes'
];

// Options pour les √©quipements
const equipements = [
  'Foyer trois pierres traditionnel',
  'Foyer classique au charbon/bois',
  'Foyer am√©lior√© au charbon/bois',
  'R√©chaud √† gaz (GPL)',
  'Cuisini√®re √©lectrique'
];

// Options pour les avantages
const avantages = [
  'Moins de fum√©e / meilleure sant√© (sont plus s√ªres pour la sant√© de ma famille.)',
  '√âconomie de combustible (cuisinent aussi bien que les m√©thodes traditionnelles)',
  'Gain de temps (Rapide)',
  'Respect de l\'environnement'
];

// Options pour les obstacles
const obstacles = [
  'Les solutions de cuisson propres co√ªtent trop cher √† l\'achat.',
  'Manque d\'information',
  'Difficult√© d\'acc√®s aux √©quipements',
  'Pr√©f√©rences culturelles ou habitudes',
  'Manque de fiabilit√© per√ßue'
];

const initialHousehold: HouseholdData = {
  nomOuCode: '',
  age: '',
  sexe: 'Homme',
  tailleMenage: '',
  communeQuartier: '',
  geolocalisation: ''
};

const initialCooking: CookingData = {
  combustibles: [],
  equipements: [],
  autresCombustibles: '',
  autresEquipements: ''
};

const initialKnowledge: KnowledgeData = {
  connaissanceSolutions: 'Non',
  solutionsConnaissances: '',
  avantages: [],
  autresAvantages: ''
};

const initialConstraints: ConstraintsData = {
  obstacles: [],
  autresObstacles: '',
  pretA: ''
};

const initialAdoption: AdoptionData = {
  pretAcheterFoyer: 'Non',
  pretAcheterGPL: 'Non'
};

const initialForm: FormState = {
  formData: {
    household: { ...initialHousehold },
    cooking: { ...initialCooking },
    knowledge: { ...initialKnowledge },
    constraints: { ...initialConstraints },
    adoption: { ...initialAdoption },
  },
};

interface SchoolFormProps {
  initialData?: FormState;
  onEditDone?: () => void;
  editId?: string;
}

export default function SchoolForm() {
  const [form, setForm] = useState<FormState>({
    formData: {
      household: initialHousehold,
      cooking: initialCooking,
      knowledge: initialKnowledge,
      constraints: initialConstraints,
      adoption: initialAdoption,
    },
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [geolocation, setGeolocation] = useState<GeolocationState>({
    latitude: null,
    longitude: null,
    accuracy: null,
    timestamp: null,
    isCapturing: false,
    error: null,
  });
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const navigate = useNavigate();

  // V√©rification d'authentification au chargement du composant
  useEffect(() => {
    const token = localStorage.getItem('token');
    const user = localStorage.getItem('user');
    
    if (!token || !user) {
      toast.error('‚ùå Session expir√©e. Veuillez vous reconnecter.');
      navigate('/login');
      return;
    }
    
    // V√©rifier que l'utilisateur est bien un contr√¥leur
    try {
      const userData = JSON.parse(user);
      if (userData.role !== 'CONTROLLER') {
        toast.error('‚ùå Acc√®s non autoris√©. Seuls les contr√¥leurs peuvent acc√©der √† cette page.');
        navigate('/login');
        return;
      }
    } catch (error) {
      toast.error('‚ùå Erreur de session. Veuillez vous reconnecter.');
      navigate('/login');
      return;
    }
  }, [navigate]);

  // √âcouter les changements de connectivit√©
  useEffect(() => {
    const handleOnline = () => {
      setIsOnline(true);
      toast.info('Connexion internet r√©tablie - Synchronisation en cours...');
      // Synchroniser les donn√©es locales
      syncService.syncLocalRecords();
    };

    const handleOffline = () => {
      setIsOnline(false);
      toast.warning('Mode hors ligne - Les donn√©es seront sauvegard√©es localement');
    };

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  // Capturer la g√©olocalisation (fonction am√©lior√©e pour mode hors ligne)
  const captureGeolocation = () => {
    if (!navigator.geolocation) {
      setGeolocation(prev => ({ 
        ...prev, 
        error: 'G√©olocalisation non support√©e par votre navigateur' 
      }));
      toast.error('‚ùå Votre navigateur ne supporte pas la g√©olocalisation');
      return;
    }

    setGeolocation(prev => ({ ...prev, isCapturing: true, error: null }));
    toast.info('üìç Capture GPS en cours... Veuillez patienter');

    // Options GPS optimis√©es pour la pr√©cision
    const options = {
      enableHighAccuracy: true,  // Pr√©cision maximale
      timeout: 30000,           // 30 secondes de timeout (plus long pour mode hors ligne)
      maximumAge: 300000,       // 5 minutes max pour les donn√©es GPS en cache
    };

    navigator.geolocation.getCurrentPosition(
      (position) => {
        const { latitude, longitude, accuracy } = position.coords;
        const timestamp = Date.now();
        
        console.log('‚úÖ GPS captur√© avec succ√®s:', {
          latitude,
          longitude,
          accuracy: `${accuracy}m`,
          timestamp: new Date(timestamp).toLocaleString('fr-FR')
        });

        setGeolocation({
          latitude,
          longitude,
          accuracy,
          timestamp,
          isCapturing: false,
          error: null,
        });
        
        // Mettre √† jour le formulaire avec les coordonn√©es GPS
        setForm(prev => ({
          ...prev,
          formData: {
            ...prev.formData,
            household: {
              ...prev.formData.household,
              geolocalisation: `${latitude.toFixed(6)}, ${longitude.toFixed(6)}`,
            },
          },
        }));

        // Notification de succ√®s
        toast.success(`üìç Position GPS captur√©e avec pr√©cision de ${Math.round(accuracy)}m`);
        
        // Afficher les informations GPS d√©taill√©es
        console.log('üìç Informations GPS d√©taill√©es:', {
          coordonn√©es: `${latitude.toFixed(6)}, ${longitude.toFixed(6)}`,
          pr√©cision: `${Math.round(accuracy)} m√®tres`,
          heure: new Date(timestamp).toLocaleTimeString('fr-FR'),
          date: new Date(timestamp).toLocaleDateString('fr-FR')
        });
      },
      (error) => {
        console.error('‚ùå Erreur GPS compl√®te:', error);
        
        let errorMessage = '';
        let toastMessage = '';
        
        // Gestion d√©taill√©e des erreurs GPS
        if (error && typeof error === 'object') {
          switch (error.code) {
            case 1: // PERMISSION_DENIED
              errorMessage = 'Permission GPS refus√©e. Veuillez autoriser l\'acc√®s √† votre position dans les param√®tres de votre navigateur.';
              toastMessage = '‚ùå Permission GPS refus√©e. Autorisez l\'acc√®s dans les param√®tres.';
              break;
            case 2: // POSITION_UNAVAILABLE
              errorMessage = 'Position GPS temporairement indisponible. Assurez-vous d\'√™tre √† l\'ext√©rieur et r√©essayez dans quelques instants.';
              toastMessage = '‚ö†Ô∏è Position GPS indisponible. Sortez √† l\'ext√©rieur et r√©essayez.';
              break;
            case 3: // TIMEOUT
              errorMessage = 'D√©lai de capture GPS d√©pass√©. V√©rifiez que vous √™tes √† l\'ext√©rieur et que votre appareil GPS fonctionne.';
              toastMessage = '‚è∞ D√©lai GPS d√©pass√©. V√©rifiez votre position et r√©essayez.';
              break;
            default:
              errorMessage = `Erreur GPS inconnue (Code: ${error.code}). Message: ${error.message || 'Aucun message d\'erreur'}`;
              toastMessage = '‚ùå Erreur GPS inconnue. R√©essayez.';
          }
        } else {
          // Erreur non standard
          errorMessage = 'Erreur GPS inattendue. V√©rifiez que votre appareil supporte le GPS et r√©essayez.';
          toastMessage = '‚ùå Erreur GPS inattendue. V√©rifiez votre appareil.';
        }

        console.error('‚ùå D√©tails de l\'erreur GPS:', {
          error: error,
          code: error?.code,
          message: error?.message,
          errorMessage: errorMessage
        });

        setGeolocation({
          latitude: null,
          longitude: null,
          accuracy: null,
          timestamp: null,
          isCapturing: false,
          error: errorMessage,
        });

        toast.error(toastMessage);
      },
      options
    );
  };

  // Chargement automatique du formulaire √† modifier si effectiveEditId est fourni
  useEffect(() => {
    // This part of the logic is removed as per the new_code, as the component is simplified.
    // If a record needs to be loaded for editing, it would require a different approach,
    // likely involving a separate edit form or a more complex state management.
  }, []);

  // Gestion du changement d'un champ principal
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setForm(prev => ({ ...prev, [name]: value }));
  };

  // Gestion du changement d'un champ du m√©nage
  const handleHouseholdChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setForm(prev => ({
      ...prev,
      formData: {
        ...prev.formData,
        household: {
          ...prev.formData.household,
          [name]: value
        }
      }
    }));
  };

  // Gestion du changement des combustibles
  const handleCombustiblesChange = (combustible: string, checked: boolean) => {
    setForm(prev => ({
      ...prev,
      formData: {
        ...prev.formData,
        cooking: {
          ...prev.formData.cooking,
          combustibles: checked
            ? [...prev.formData.cooking.combustibles, combustible]
            : prev.formData.cooking.combustibles.filter(c => c !== combustible)
        }
      }
    }));
  };

  // Gestion du changement des √©quipements
  const handleEquipementsChange = (equipement: string, checked: boolean) => {
    setForm(prev => ({
      ...prev,
      formData: {
        ...prev.formData,
        cooking: {
          ...prev.formData.cooking,
          equipements: checked
            ? [...prev.formData.cooking.equipements, equipement]
            : prev.formData.cooking.equipements.filter(e => e !== equipement)
        }
      }
    }));
  };

  // Gestion du changement des avantages
  const handleAvantagesChange = (avantage: string, checked: boolean) => {
    setForm(prev => ({
      ...prev,
      formData: {
        ...prev.formData,
        knowledge: {
          ...prev.formData.knowledge,
          avantages: checked
            ? [...prev.formData.knowledge.avantages, avantage]
            : prev.formData.knowledge.avantages.filter(a => a !== avantage)
        }
      }
    }));
  };

  // Gestion du changement des obstacles
  const handleObstaclesChange = (obstacle: string, checked: boolean) => {
    setForm(prev => ({
      ...prev,
      formData: {
        ...prev.formData,
        constraints: {
          ...prev.formData.constraints,
          obstacles: checked
            ? [...prev.formData.constraints.obstacles, obstacle]
            : prev.formData.constraints.obstacles.filter(o => o !== obstacle)
        }
      }
    }));
  };

  // Gestion du changement des autres champs
  const handleOtherChange = (section: string, field: string, value: string) => {
    setForm(prev => ({
      ...prev,
      formData: {
        ...prev.formData,
        [section]: {
          ...prev.formData[section as keyof typeof prev.formData],
          [field]: value
        }
      }
    }));
  };

  // Validation simple
  const validate = (): boolean => {
    if (!form.formData.household.nomOuCode || !form.formData.household.age || !form.formData.household.tailleMenage) {
      toast.error('Veuillez remplir tous les champs d\'identification du m√©nage.');
      return false;
    }
    if (form.formData.cooking.combustibles.length === 0) {
      toast.error('Veuillez s√©lectionner au moins un type de combustible.');
      return false;
    }
    if (form.formData.cooking.equipements.length === 0) {
      toast.error('Veuillez s√©lectionner au moins un √©quipement de cuisson.');
      return false;
    }
    
    // Validation GPS obligatoire
    if (!geolocation.latitude) {
      toast.warning('‚ö†Ô∏è La capture GPS est obligatoire. Veuillez utiliser le bouton "Capturer ma position GPS" pour obtenir vos coordonn√©es automatiquement.');
      return false;
    }
    
    // Validation du format GPS
    const gpsRegex = /^-?\d+\.\d+,\s*-?\d+\.\d+$/;
    if (!gpsRegex.test(form.formData.household.geolocalisation.trim())) {
      toast.warning('‚ö†Ô∏è Format GPS invalide. Utilisez le bouton de capture automatique ou respectez le format "latitude, longitude" (ex: -4.4419, 15.2663)');
      return false;
    }
    
    toast.success('‚úÖ Formulaire valide !');
    return true;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      // √âTAPE 1: TOUJOURS sauvegarder en local d'abord (s√©curit√©)
      const localId = await localStorageService.saveRecord(form);
      console.log('‚úÖ Enregistrement sauvegard√© en local avec ID:', localId);

      // √âTAPE 2: V√©rifier la connectivit√©
      if (!isOnline) {
        // Mode hors ligne : notification simple de sauvegarde locale
        toast.success('‚úÖ Formulaire sauvegard√© localement');
        
        // R√©initialiser le formulaire
        setForm(initialForm);
        setGeolocation({ latitude: null, longitude: null, accuracy: null, timestamp: null, isCapturing: false, error: null });
        
        // D√©marrer la synchronisation automatique
        setTimeout(() => {
          syncService.syncLocalRecords();
        }, 1000);
        
        setIsSubmitting(false);
        return;
      }

      // √âTAPE 3: Mode en ligne - v√©rifier le token
      const token = localStorage.getItem('token');
      if (!token) {
        // Session expir√©e : notification de sauvegarde locale
        toast.success('‚úÖ Formulaire sauvegard√© localement');
        toast.info('üì° Synchronisation automatique lors de la reconnexion');
        
        // R√©initialiser le formulaire
        setForm(initialForm);
        setGeolocation({ latitude: null, longitude: null, accuracy: null, timestamp: null, isCapturing: false, error: null });
        
        setIsSubmitting(false);
        navigate('/login');
        return;
      }

      // √âTAPE 4: Tentative d'envoi au serveur
      console.log('üåê Tentative d\'envoi du formulaire au serveur...');
      const response = await fetch('http://localhost:3000/records', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ formData: form })
      });

      // √âTAPE 5: Traitement de la r√©ponse du serveur
      if (response.ok) {
        // SUCC√àS: Le serveur a accept√© le formulaire
        const result = await response.json();
        console.log('‚úÖ Formulaire envoy√© avec succ√®s au serveur:', result);
        
        // Nettoyer le stockage local (optionnel, mais recommand√©)
        try {
          await localStorageService.markAsSynced(localId, result.id);
          await localStorageService.removeSyncedRecord(localId);
          console.log('‚úÖ Stockage local nettoy√© apr√®s synchronisation');
        } catch (cleanupError) {
          console.warn('‚ö†Ô∏è Erreur lors du nettoyage local (non critique):', cleanupError);
        }
        
        // NOTIFICATION UNIQUE : Formulaire envoy√© au serveur
        toast.success('‚úÖ Formulaire envoy√© au serveur');
        
        // R√©initialiser le formulaire
        setForm(initialForm);
        setGeolocation({ latitude: null, longitude: null, accuracy: null, timestamp: null, isCapturing: false, error: null });
        
        // Rediriger vers la page du contr√¥leur
        navigate('/controleur');
        
      } else {
        // √âCHEC: Le serveur a rejet√© le formulaire
        let errorMessage = 'Erreur lors de la soumission au serveur';
        try {
          const errorData = await response.json();
          errorMessage = errorData.message || errorMessage;
        } catch (parseError) {
          console.warn('Impossible de parser la r√©ponse d\'erreur du serveur');
        }
        
        console.error('‚ùå Erreur serveur:', errorMessage);
        
        // NOTIFICATION SIMPLE : Formulaire sauvegard√© localement
        toast.success('‚úÖ Formulaire sauvegard√© localement');
        
        // R√©initialiser le formulaire
        setForm(initialForm);
        setGeolocation({ latitude: null, longitude: null, accuracy: null, timestamp: null, isCapturing: false, error: null });
        
        // Programmer la synchronisation automatique
        setTimeout(() => {
          syncService.syncLocalRecords();
        }, 2000);
      }

    } catch (error: any) {
      // ERREUR: Exception JavaScript (r√©seau, parsing, etc.)
      console.error('‚ùå Exception lors de la soumission:', error);
      
      // NOTIFICATION SIMPLE : Formulaire sauvegard√© localement
      toast.success('‚úÖ Formulaire sauvegard√© localement');
      
      // R√©initialiser le formulaire
      setForm(initialForm);
      setGeolocation({ latitude: null, longitude: null, accuracy: null, timestamp: null, isCapturing: false, error: null });
      
      // Programmer la synchronisation automatique
      setTimeout(() => {
        syncService.syncLocalRecords();
      }, 2000);
      
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="max-w-4xl mx-auto bg-white p-8 rounded-xl shadow-lg mt-8">
      <form onSubmit={handleSubmit}>
        <h2 className="text-2xl font-bold text-center mb-6">SOLUTIONS DE CUISSON PROPRE</h2>
        <p className="text-center text-gray-600 mb-6">Enqu√™te sur l'adoption des solutions de cuisson propre en RDC</p>
        
        {/* Banni√®re d'information GPS */}
        <div className="mb-6 p-4 bg-blue-100 border border-blue-300 rounded-lg">
          <div className="flex items-start gap-3">
            <div className="flex-shrink-0">
              <svg className="h-6 w-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <div className="flex-1">
              <h4 className="font-semibold text-blue-800 mb-2">üìç G√©olocalisation GPS Obligatoire (Fonctionne Hors Ligne)</h4>
              <p className="text-blue-700 text-sm mb-2">
                <strong>‚úÖ IMPORTANT :</strong> La capture GPS fonctionne <strong>SANS INTERNET</strong> ! 
                Le GPS utilise le r√©cepteur int√©gr√© de votre appareil et ne n√©cessite aucune connexion.
              </p>
              <div className="text-blue-600 text-xs space-y-1">
                <div><strong>Avantages :</strong></div>
                <ul className="list-disc list-inside ml-2 space-y-1">
                  <li>Fonctionne en mode hors ligne (sans internet)</li>
                  <li>Pr√©cision maximale avec GPS haute pr√©cision</li>
                  <li>Capture automatique des coordonn√©es</li>
                  <li>Validation en temps r√©el de la position</li>
                </ul>
                <div className="mt-2 text-blue-700">
                  <strong>üí° Conseil :</strong> Assurez-vous d'√™tre √† l'ext√©rieur ou pr√®s d'une fen√™tre pour une meilleure r√©ception GPS.
                </div>
              </div>
            </div>
          </div>
        </div>
        
        {/* Section 1: Identification du m√©nage */}
        <div className="mb-8 bg-blue-50 p-6 rounded-xl">
          <h3 className="text-xl font-bold mb-4 text-blue-800">1. Identification du m√©nage</h3>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block font-semibold mb-2">Nom ou code du m√©nage *</label>
              <input
                type="text"
                name="nomOuCode"
                value={form.formData.household.nomOuCode}
                onChange={handleHouseholdChange}
                className="w-full border rounded p-2"
                required
              />
            </div>
            
            <div>
              <label className="block font-semibold mb-2">Age *</label>
              <input
                type="text"
                name="age"
                value={form.formData.household.age}
                onChange={handleHouseholdChange}
                className="w-full border rounded p-2"
                required
              />
            </div>
            
            <div>
              <label className="block font-semibold mb-2">Sexe *</label>
              <div className="flex gap-4">
                <label className="flex items-center gap-2">
                  <input
                    type="radio"
                    name="sexe"
                    value="Homme"
                    checked={form.formData.household.sexe === 'Homme'}
                    onChange={handleHouseholdChange}
                  />
                  Homme
                </label>
                <label className="flex items-center gap-2">
                  <input
                    type="radio"
                    name="sexe"
                    value="Femme"
                    checked={form.formData.household.sexe === 'Femme'}
                    onChange={handleHouseholdChange}
                  />
                  Femme
                </label>
              </div>
            </div>
            
            <div>
              <label className="block font-semibold mb-2">Taille du m√©nage *</label>
              <input
                type="text"
                name="tailleMenage"
                value={form.formData.household.tailleMenage}
                onChange={handleHouseholdChange}
                className="w-full border rounded p-2"
                placeholder="ex: 5-8 personnes"
                required
              />
            </div>
            
            <div>
              <label className="block font-semibold mb-2">Commune/Quartier *</label>
              <select
                name="communeQuartier"
                value={form.formData.household.communeQuartier}
                onChange={handleHouseholdChange}
                className="w-full border rounded p-2"
                required
              >
                <option value="">S√©lectionnez une commune</option>
                <option value="Gombe">Gombe</option>
                <option value="Kinshasa">Kinshasa</option>
                <option value="Kintambo">Kintambo</option>
                <option value="Ngaliema">Ngaliema</option>
                <option value="Mont-Ngafula">Mont-Ngafula</option>
                <option value="Selembao">Selembao</option>
                <option value="Bumbu">Bumbu</option>
                <option value="Makala">Makala</option>
                <option value="Ngiri-Ngiri">Ngiri-Ngiri</option>
                <option value="Kalamu">Kalamu</option>
                <option value="Kasa-Vubu">Kasa-Vubu</option>
                <option value="Bandalungwa">Bandalungwa</option>
                <option value="Lingwala">Lingwala</option>
                <option value="Barumbu">Barumbu</option>
                <option value="Matete">Matete</option>
                <option value="Lemba">Lemba</option>
                <option value="Ngaba">Ngaba</option>
                <option value="Kisenso">Kisenso</option>
                <option value="Limete">Limete</option>
                <option value="Masina">Masina</option>
                <option value="Nsele">Nsele</option>
                <option value="Maluku">Maluku</option>
                <option value="Kimbaseke">Kimbaseke</option>
                <option value="Ndjili">Ndjili</option>
              </select>
            </div>
            
            <div className="md:col-span-2">
              <label className="block font-semibold mb-2">G√©olocalisation GPS *</label>
              <div className="flex gap-2">
                <input
                  type="text"
                  name="geolocalisation"
                  value={form.formData.household.geolocalisation}
                  onChange={handleHouseholdChange}
                  className="flex-1 border rounded p-2"
                  placeholder="Cliquez sur 'Capturer ma position GPS' pour obtenir automatiquement vos coordonn√©es"
                  readOnly
                  required
                />
                <button
                  type="button"
                  onClick={captureGeolocation}
                  disabled={isSubmitting || geolocation.isCapturing}
                  className={`px-4 py-2 rounded transition-colors ${
                    geolocation.isCapturing 
                      ? 'bg-yellow-600 text-white cursor-wait' 
                      : 'bg-blue-600 text-white hover:bg-blue-700'
                  } disabled:bg-gray-400 disabled:cursor-not-allowed`}
                >
                  {geolocation.isCapturing ? (
                    <span className="flex items-center gap-2">
                      <svg className="animate-spin h-4 w-4" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Capture...
                    </span>
                  ) : (
                    'Capturer ma position GPS'
                  )}
                </button>
              </div>
              
              {/* Affichage du statut GPS */}
              <div className="mt-2 space-y-2">
                {/* Coordonn√©es captur√©es */}
                {geolocation.latitude && geolocation.longitude && (
                  <div className="flex items-center gap-2 text-green-600 text-sm">
                    <span>‚úÖ</span>
                    <span className="font-medium">Position GPS captur√©e :</span>
                    <span className="font-mono bg-green-100 px-2 py-1 rounded">
                      {geolocation.latitude.toFixed(6)}, {geolocation.longitude.toFixed(6)}
                    </span>
                  </div>
                )}
                
                {/* Pr√©cision GPS */}
                {geolocation.accuracy && (
                  <div className="flex items-center gap-2 text-blue-600 text-sm">
                    <span>üìè</span>
                    <span>Pr√©cision : {Math.round(geolocation.accuracy)} m√®tres</span>
                  </div>
                )}
                
                {/* Heure de capture */}
                {geolocation.timestamp && (
                  <div className="flex items-center gap-2 text-gray-600 text-sm">
                    <span>üïê</span>
                    <span>Captur√© le {new Date(geolocation.timestamp).toLocaleDateString('fr-FR')} √† {new Date(geolocation.timestamp).toLocaleTimeString('fr-FR')}</span>
                  </div>
                )}
                
                {/* Erreur GPS */}
                {geolocation.error && (
                  <div className="flex items-center gap-2 text-red-600 text-sm">
                    <span>‚ùå</span>
                    <span>{geolocation.error}</span>
                  </div>
                )}
                
                {/* Indicateur de disponibilit√© GPS */}
                <div className="flex items-center gap-2 text-xs text-gray-500">
                  <span>üì°</span>
                  <span>GPS disponible : {navigator.geolocation ? 'Oui' : 'Non'}</span>
                  <span>‚Ä¢</span>
                  <span>Mode hors ligne : {!navigator.onLine ? 'Oui' : 'Non'}</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Section 2: Mode de cuisson actuelle */}
        <div className="mb-8 bg-green-50 p-6 rounded-xl">
          <h3 className="text-xl font-bold mb-4 text-green-800">2. Mode de cuisson actuelle</h3>
          
          <div className="mb-6">
            <h4 className="font-semibold mb-3">2.1.1. Quels types de combustibles utilisez-vous principalement pour la cuisson ? *</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              {combustibles.map(combustible => (
                <label key={combustible} className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    checked={form.formData.cooking.combustibles.includes(combustible)}
                    onChange={(e) => handleCombustiblesChange(combustible, e.target.checked)}
                  />
                  {combustible}
                </label>
              ))}
            </div>
            <div className="mt-3">
              <label className="block font-semibold mb-2">Autres (pr√©cisez):</label>
              <input
                type="text"
                value={form.formData.cooking.autresCombustibles || ''}
                onChange={(e) => handleOtherChange('cooking', 'autresCombustibles', e.target.value)}
                className="w-full border rounded p-2"
                placeholder="Pr√©cisez les autres combustibles"
              />
            </div>
          </div>
          
          <div>
            <h4 className="font-semibold mb-3">2.1.2. Quel est l'√©quipement de cuisson actuel ? (Plusieurs choix possibles) *</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              {equipements.map(equipement => (
                <label key={equipement} className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    checked={form.formData.cooking.equipements.includes(equipement)}
                    onChange={(e) => handleEquipementsChange(equipement, e.target.checked)}
                  />
                  {equipement}
                </label>
              ))}
            </div>
            <div className="mt-3">
              <label className="block font-semibold mb-2">Autres (pr√©cisez):</label>
              <input
                type="text"
                value={form.formData.cooking.autresEquipements || ''}
                onChange={(e) => handleOtherChange('cooking', 'autresEquipements', e.target.value)}
                className="w-full border rounded p-2"
                placeholder="Pr√©cisez les autres √©quipements"
              />
            </div>
          </div>
        </div>

        {/* Section 3: Connaissance des solutions de cuisson propres */}
        <div className="mb-8 bg-yellow-50 p-6 rounded-xl">
          <h3 className="text-xl font-bold mb-4 text-yellow-800">3. Connaissance des solutions de cuisson propres</h3>
          
          <div className="mb-6">
            <h4 className="font-semibold mb-3">3.1. Avez-vous d√©j√† entendu parler des solutions de cuisson dites ¬´ propres ¬ª ?</h4>
            <div className="flex gap-4 mb-3">
              <label className="flex items-center gap-2">
                <input
                  type="radio"
                  name="connaissanceSolutions"
                  value="Oui"
                  checked={form.formData.knowledge.connaissanceSolutions === 'Oui'}
                  onChange={(e) => handleOtherChange('knowledge', 'connaissanceSolutions', e.target.value)}
                />
                Oui
              </label>
              <label className="flex items-center gap-2">
                <input
                  type="radio"
                  name="connaissanceSolutions"
                  value="Non"
                  checked={form.formData.knowledge.connaissanceSolutions === 'Non'}
                  onChange={(e) => handleOtherChange('knowledge', 'connaissanceSolutions', e.target.value)}
                />
                Non
              </label>
            </div>
            {form.formData.knowledge.connaissanceSolutions === 'Oui' && (
              <div>
                <label className="block font-semibold mb-2">Si oui, lesquelles ?</label>
                <input
                  type="text"
                  value={form.formData.knowledge.solutionsConnaissances || ''}
                  onChange={(e) => handleOtherChange('knowledge', 'solutionsConnaissances', e.target.value)}
                  className="w-full border rounded p-2"
                  placeholder="Pr√©cisez les solutions connues"
                />
              </div>
            )}
          </div>
          
          <div>
            <h4 className="font-semibold mb-3">3.2. Selon vous, quels sont les avantages potentiels des solutions de cuisson propre ? (plusieurs r√©ponses possibles)</h4>
            <div className="grid grid-cols-1 gap-3">
              {avantages.map(avantage => (
                <label key={avantage} className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    checked={form.formData.knowledge.avantages.includes(avantage)}
                    onChange={(e) => handleAvantagesChange(avantage, e.target.checked)}
                  />
                  {avantage}
                </label>
              ))}
            </div>
            <div className="mt-3">
              <label className="block font-semibold mb-2">Autres :</label>
              <input
                type="text"
                value={form.formData.knowledge.autresAvantages || ''}
                onChange={(e) => handleOtherChange('knowledge', 'autresAvantages', e.target.value)}
                className="w-full border rounded p-2"
                placeholder="Pr√©cisez les autres avantages"
              />
            </div>
          </div>
        </div>

        {/* Section 4: Perceptions et contraintes */}
        <div className="mb-8 bg-red-50 p-6 rounded-xl">
          <h3 className="text-xl font-bold mb-4 text-red-800">4. Perceptions et contraintes</h3>
          
          <div className="mb-6">
            <h4 className="font-semibold mb-3">4.1. Quels sont les principaux obstacles √† l'adoption d'une solution de cuisson propre dans votre foyer ? (plusieurs r√©ponses possibles)</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              {obstacles.map(obstacle => (
                <label key={obstacle} className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    checked={form.formData.constraints.obstacles.includes(obstacle)}
                    onChange={(e) => handleObstaclesChange(obstacle, e.target.checked)}
                  />
                  {obstacle}
                </label>
              ))}
            </div>
            <div className="mt-3">
              <label className="block font-semibold mb-2">Autres :</label>
              <input
                type="text"
                value={form.formData.constraints.autresObstacles || ''}
                onChange={(e) => handleOtherChange('constraints', 'autresObstacles', e.target.value)}
                className="w-full border rounded p-2"
                placeholder="Pr√©cisez les autres obstacles"
              />
            </div>
          </div>
          
          <div>
            <label className="block font-semibold mb-2">Je suis pr√™t(e) √† :</label>
            <input
              type="text"
              value={form.formData.constraints.pretA || ''}
              onChange={(e) => handleOtherChange('constraints', 'pretA', e.target.value)}
              className="w-full border rounded p-2"
              placeholder="Pr√©cisez ce que vous √™tes pr√™t(e) √† faire"
            />
          </div>
        </div>

        {/* Section 5: Intention d'adoption */}
        <div className="mb-8 bg-purple-50 p-6 rounded-xl">
          <h3 className="text-xl font-bold mb-4 text-purple-800">5. Intention d'adoption</h3>
          
          <div className="mb-6">
            <h4 className="font-semibold mb-3">5.1. Seriez-vous pr√™t(e) √† acheter et remplacer votre mode actuel par une solution propre (soit foyer am√©lior√©) ?</h4>
            <div className="flex gap-4">
              <label className="flex items-center gap-2">
                <input
                  type="radio"
                  name="pretAcheterFoyer"
                  value="Oui"
                  checked={form.formData.adoption.pretAcheterFoyer === 'Oui'}
                  onChange={(e) => handleOtherChange('adoption', 'pretAcheterFoyer', e.target.value)}
                />
                Oui
              </label>
              <label className="flex items-center gap-2">
                <input
                  type="radio"
                  name="pretAcheterFoyer"
                  value="Non"
                  checked={form.formData.adoption.pretAcheterFoyer === 'Non'}
                  onChange={(e) => handleOtherChange('adoption', 'pretAcheterFoyer', e.target.value)}
                />
                Non
              </label>
            </div>
          </div>
          
          <div>
            <h4 className="font-semibold mb-3">5.2. Seriez-vous pr√™t(e) √† acheter/utiliser un r√©chaud GPL dans les 6 prochains mois ?</h4>
            <div className="flex gap-4">
              <label className="flex items-center gap-2">
                <input
                  type="radio"
                  name="pretAcheterGPL"
                  value="Oui"
                  checked={form.formData.adoption.pretAcheterGPL === 'Oui'}
                  onChange={(e) => handleOtherChange('adoption', 'pretAcheterGPL', e.target.value)}
                />
                Oui
              </label>
              <label className="flex items-center gap-2">
                <input
                  type="radio"
                  name="pretAcheterGPL"
                  value="Non"
                  checked={form.formData.adoption.pretAcheterGPL === 'Non'}
                  onChange={(e) => handleOtherChange('adoption', 'pretAcheterGPL', e.target.value)}
                />
                Non
              </label>
            </div>
          </div>
        </div>

        <button type="submit" className="w-full py-3 rounded-xl text-lg font-bold shadow-lg bg-blue-600 hover:bg-blue-700 text-white" disabled={isSubmitting}>
          {isSubmitting ? 'Enregistrement...' : 'Soumettre'}
        </button>
      </form>
    </div>
  );
} 